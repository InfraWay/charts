apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.postgres.name }}
  labels:
    app: {{ .Values.postgres.name }}
spec:
  serviceName: {{ .Values.postgres.name }}
  replicas: {{ .Values.postgres.statefulSet.replicaCount }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Values.postgres.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.postgres.name }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ .Values.postgres.name }}
                topologyKey: kubernetes.io/hostname
      containers:
        - name: {{ .Values.postgres.name }}
          image: {{ .Values.postgres.statefulSet.image }}
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secret.name }}
                  key: superUserPassword
            - name: POSTGRES_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secret.name }}
                  key: replicationUserPassword
            - name: ADMIN_ROLE_NAME
              value: admin
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secret.name }}
                  key: adminUserPassword
            - name: APP_ROLE_NAME
              value: {{ .Values.app.name }}
            - name: APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secret.name }}
                  key: appUserPassword
            - name: DB_NAME
              value: senfu
            - name: SCHEMA_NAME
              value: senfu
            - name: EXTENSIONS
              value: pgcrypto,"uuid-ossp"
          ports:
            - containerPort: {{ .Values.postgres.service.port }}
          volumeMounts:
            - name: {{ .Values.postgres.name }}-db
              mountPath: /var/lib/postgresql/data
            - name: base-config
              mountPath: /etc/postgres.conf
              subPath: postgres.conf
            - name: custom-config
              mountPath: /etc/pg_hba.conf
              subPath: pg_hba.conf
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U postgres -h $POD_IP
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 15
            failureThreshold: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U postgres -h $POD_IP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
      terminationGracePeriodSeconds: 10
      volumes:
        - name: base-config
          configMap:
            name: {{ .Values.postgres.cm.base.name }}
            defaultMode: 511
        - name: custom-config
          configMap:
            name: {{ .Values.postgres.cm.custom.name }}
            defaultMode: 511
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.postgres.name }}-db
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
        storageClassName: do-block-storage
