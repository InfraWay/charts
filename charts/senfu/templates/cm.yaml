apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.postgres.name }}-conf
  namespace: default
data:
  primary_init_script.sh: |
    #!/bin/bash
    set -e

    dt=$(date '+%d/%m/%Y %H:%M:%S');
    echo "$dt - Running init script the 1st time Primary PostgreSql container is created...";

    adminRole=${ADMIN_ROLE_NAME:-admin}
    appRole=${APP_ROLE_NAME:-app}
    adminPass=${ADMIN_PASSWORD:-${adminRole}}
    appPass=${APP_PASSWORD:-${appRole}}
    dbName=${DB_NAME:-default}
    schemaName=${SCHEMA_NAME:-${dbName}}

    creating_extensions_sql=''
    for extension in ${EXTENSIONS//,/ }
    do
      creating_extensions_sql="${creating_extensions_sql}
      create extension ${extension} schema ${schemaName};"
    done

    echo "$dt - Running: psql -v ON_ERROR_STOP=1 --username $POSTGRES_USER --dbname $POSTGRES_DB ...";

    # add app user to admin group to set default privileges for new tables
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
      create user ${adminRole} with createrole password '${adminPass}';
      create database ${dbName} with owner = '${adminRole}';

      \connect ${dbName}
      drop schema public;

      create schema ${schemaName};
      set schema '${schemaName}';
      grant all privileges on schema ${schemaName} to ${adminRole} with grant option;

      create user ${appRole} with password '${appPass}';
      grant usage on schema ${schemaName} to ${appRole};

      grant select, insert, update, delete on all tables in schema ${schemaName} to ${appRole};
      grant update on all sequences in schema ${schemaName} to ${appRole};

      alter default privileges for role ${adminRole} in schema ${schemaName}
      grant select, insert, update, delete on tables
      to ${appRole};

      alter default privileges for role ${adminRole} in schema ${schemaName}
      grant update on sequences
      to ${appRole};

      ${creating_extensions_sql}

      set search_path to ${schemaName};
    EOSQL

    echo "$dt - Init script is completed";
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.volumes.configMapName }}
data:
  nginx.conf: |
    user                www-data;
    worker_processes    auto;
    error_log           /var/log/nginx/error.log;
    pid                 /run/nginx.pid;
    include             /etc/nginx/modules-enabled/*.conf;

    events {
        worker_connections      1024;
    }

    http {
        root          /usr/share/nginx/html;
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log              /var/log/nginx/access.log  main;

        sendfile                on;
        keepalive_timeout       65;
        client_max_body_size    20M;

        gzip                    on;
        gzip_vary               on;
        gzip_proxied            any;
        gzip_http_version       1.1;
        gzip_types              text/plain text/css application/json text/javascript application/javascript;

        proxy_http_version      1.1;

        resolver                kube-dns.kube-system.svc.cluster.local valid=5s ipv6=off;

        server {
            server_name         ~^www\.(?<domain>.+)$;
            return              301 $scheme://$domain$request_uri;
        }

        server {
            listen 80           default_server;
            server_name         senfu.tech;
            set                 $upstream http://localhost:3000;

            location / {
                try_files $uri /index.html;
            }

            location /pano {
              alias /mnt/pano;
              autoindex on;
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
              add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
            }

            location ~ /api/(.*) {
                proxy_pass $upstream/$1$is_args$args;
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: base-kubegres-config
data:
  postgres.conf: |
    max_connections = 100
